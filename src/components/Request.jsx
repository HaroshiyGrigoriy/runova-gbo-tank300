import { useState, useEffect } from "react";
import "../styles/request.css";

export default function Request({ id = "request" }) {
  const [form, setForm]       = useState({ name: "", city: "", phone: "", comment: "" });
  const [touched, setTouched] = useState({});
  const [errors,  setErrors]  = useState({});
  const [sending, setSending] = useState(false);
  const [sent,    setSent]    = useState(false);

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const validate = f => {
    const e = {};
    if (!f.name.trim())                    e.name    = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è";
    if (!f.city.trim())                    e.city    = "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥";
    if (!/^\+?\d[\d ()-]{8,}$/.test(f.phone)) e.phone = "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω";
    if (f.comment.length > 200)            e.comment = "–ú–∞–∫—Å¬†200‚ÄØ—Å–∏–º–≤.";
    return e;
  };
  useEffect(() => setErrors(validate(form)), [form]);

  const onChange = e => {
    const { name, value } = e.target;
    setForm(f => ({ ...f, [name]: value }));
  };
  const onBlur   = e => setTouched(t => ({ ...t, [e.target.name]: true }));

  const canSend  = !sending && Object.keys(errors).length === 0;

  const submit   = async e => {
    e.preventDefault();
    const errs = validate(form);
    setErrors(errs);
    setTouched({ name: true, city: true, phone: true, comment: true });
    if (Object.keys(errs).length) return;

    setSending(true);
    try {
      /* üëâ —Å—é–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π fetch/axios:
      await fetch("/api/lead", {
        method:"POST",
        headers:{ "Content-Type":"application/json" },
        body:JSON.stringify({ ...form, source:"request-section" })
      });
      */
      await new Promise(r => setTimeout(r, 1200)); // –∏–º–∏—Ç–∞—Ü–∏—è
      setSent(true);
    } catch {
      alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    } finally {
      setSending(false);
    }
  };

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  return (
    <section id={id} className="request-section">
      <div className="container">
        {!sent ? (
          <div className="request-form-wrap">
            <h2 className="request-title">–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</h2>
            <p className="request-lead">
              –ü–æ–ª–Ω—ã–π <strong>–æ—Ç–∫–∞–∑ –æ—Ç¬†–±–µ–Ω–∑–∏–Ω–∞</strong> –¥–ª—è&nbsp;Tank¬†300
            </p>

            <form className="request-form" onSubmit={submit} noValidate>
              {/* –ò–º—è */}
              <label className={`field ${touched.name && errors.name ? "error" : ""}`}>
                <span>–ò–º—è</span>
                <input
                  name="name"
                  value={form.name}
                  onChange={onChange}
                  onBlur={onBlur}
                  placeholder="–ò–≤–∞–Ω"
                />
                {touched.name && errors.name && <em>{errors.name}</em>}
              </label>

              {/* –ì–æ—Ä–æ–¥ */}
              <label className={`field ${touched.city && errors.city ? "error" : ""}`}>
                <span>–ì–æ—Ä–æ–¥</span>
                <input
                  name="city"
                  value={form.city}
                  onChange={onChange}
                  onBlur={onBlur}
                  placeholder="–ú–æ—Å–∫–≤–∞"
                />
                {touched.city && errors.city && <em>{errors.city}</em>}
              </label>

              {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
              <label className={`field ${touched.phone && errors.phone ? "error" : ""}`}>
                <span>–¢–µ–ª–µ—Ñ–æ–Ω</span>
                <input
                  name="phone"
                  value={form.phone}
                  onChange={onChange}
                  onBlur={onBlur}
                  placeholder="+7¬†9–•–•¬†XXX‚ÄëXX‚ÄëXX"
                />
                {touched.phone && errors.phone && <em>{errors.phone}</em>}
              </label>

              {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
              <label className={`field ${touched.comment && errors.comment ? "error" : ""}`}>
                <span>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>
                <textarea
                  name="comment"
                  rows={3}
                  value={form.comment}
                  onChange={onChange}
                  onBlur={onBlur}
                  placeholder="–ú–∞—Ä–∫–∞ / –ø—Ä–æ–±–µ–≥ / –≤–æ–ø—Ä–æ—Å—ã‚Ä¶"
                />
                {touched.comment && errors.comment && <em>{errors.comment}</em>}
              </label>

              <button
                type="submit"
                className="request-submit"
                disabled={!canSend}
              >
                {sending ? <span className="spinner" /> : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
              </button>

              <p className="privacy-note">
                –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã&nbsp;—Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å&nbsp;–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
              </p>
            </form>
          </div>
        ) : (
          <div className="request-success">
            <div className="request-success__icon">‚úÖ</div>
            <h2>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</h2>
            <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å&nbsp;–≤–∞–º–∏ –≤&nbsp;–±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
            <button className="request-submit" onClick={() => setSent(false)}>
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        )}
      </div>
    </section>
  );
}